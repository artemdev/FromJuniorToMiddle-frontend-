{"version":3,"sources":["component/AuthForm/AuthForm.module.scss","views/AuthPageView/AuthPageView.module.scss","helpers/formSchema.js","component/AuthForm/SingIn.js","component/AuthForm/SignUp.js","views/AuthPageView/AuthPageView.js"],"names":["module","exports","SignupSchema","Yup","shape","email","min","max","required","password","AuthForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","authOperations","logIn","errors","touched","className","styles","form","autoComplete","text","buttonGoogleWrapper","href","routes","GOOGLE_AUTH_URL","buttonGoogle","type","name","placeholder","input","buttonWrapper","exact","to","AUTH_SIGNUP","buttonSignUp","buttonSignIn","active","register","AUTH_SIGNIN","AuthPageView","action","signIn","signUp","section","wrapper","title","textBold"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,KAAO,uBAAuB,oBAAsB,sCAAsC,aAAe,+BAA+B,MAAQ,wBAAwB,OAAS,yBAAyB,cAAgB,gCAAgC,aAAe,+BAA+B,OAAS,yBAAyB,aAAe,iC,oBCAzYD,EAAOC,QAAU,CAAC,QAAU,8BAA8B,QAAU,8BAA8B,MAAQ,4BAA4B,KAAO,2BAA2B,SAAW,iC,8GCepKC,EAfMC,MAAaC,MAAM,CACtCC,MAAOF,MACJE,MAAM,yBACNC,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,SAAUN,MACPG,IACC,EACA,+GAEDC,IAAI,GAAI,aACRC,SAAS,c,OCJC,SAASE,IACtB,IAAMC,EAAWC,cAEjB,OACE,cAAC,IAAD,CACEC,cAAe,CACbJ,SAAU,GACVJ,MAAO,IAETS,iBAAkBZ,EAClBa,SAAU,SAAAC,GACR,IAAMX,EAAQW,EAAOX,MACfI,EAAWO,EAAOP,SACxBE,EAASM,IAAeC,MAAM,CAAEb,QAAOI,eAT3C,SAYG,gBAAGU,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,CAAMC,UAAWC,IAAOC,KAAMC,aAAa,MAA3C,UACE,oBAAIH,UAAWC,IAAOG,KAAtB,2DAGA,qBAAKJ,UAAWC,IAAOI,oBAAvB,SACE,mBAAGC,KAAMC,IAAOC,gBAAiBR,UAAWC,IAAOQ,aAAnD,sBAIF,qBAAIT,UAAWC,IAAOG,KAAtB,UACE,2CADF,8BAGA,cAAC,IAAD,CACEM,KAAK,QACLC,KAAK,QACLC,YAAY,SACZZ,UAAWC,IAAOY,QAGnBf,EAAOd,OAASe,EAAQf,MACvB,qBAAKgB,UAAWC,IAAOH,OAAvB,SAAgCA,EAAOd,QACrC,KAEJ,cAAC,IAAD,CACE0B,KAAK,WACLC,KAAK,WACLC,YAAY,WACZZ,UAAWC,IAAOY,QAEnBf,EAAOV,UAAYW,EAAQX,SAC1B,qBAAKY,UAAWC,IAAOH,OAAvB,SAAgCA,EAAOV,WACrC,KAEJ,sBAAKY,UAAWC,IAAOa,cAAvB,UACE,cAAC,IAAD,CACEC,OAAK,EACLC,GAAIT,IAAOU,YACXjB,UAAWC,IAAOiB,aAHpB,qBAOA,wBACER,KAAK,SACLV,UAAWC,IAAOkB,aAAe,IAAMlB,IAAOmB,OAFhD,4BC1DG,SAAS/B,IACtB,IAAMC,EAAWC,cAEjB,OACE,cAAC,IAAD,CACEC,cAAe,CACbJ,SAAU,GACVJ,MAAO,IAETS,iBAAkBZ,EAClBa,SAAU,SAAAC,GACR,IAAMX,EAAQW,EAAOX,MACfI,EAAWO,EAAOP,SACxBE,EAASM,IAAeyB,SAAS,CAAErC,QAAOI,eAT9C,SAYG,gBAAGU,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,CAAMC,UAAWC,IAAOC,KAAMC,aAAa,MAA3C,UACE,oBAAIH,UAAWC,IAAOG,KAAtB,2DAGA,qBAAKJ,UAAWC,IAAOI,oBAAvB,SACE,mBAAGC,KAAMC,IAAOC,gBAAiBR,UAAWC,IAAOQ,aAAnD,sBAIF,qBAAIT,UAAWC,IAAOG,KAAtB,UACE,6CADF,8BAGA,cAAC,IAAD,CACEM,KAAK,QACLC,KAAK,QACLC,YAAY,SACZZ,UAAWC,IAAOY,QAEnBf,EAAOd,OAASe,EAAQf,MACvB,qBAAKgB,UAAWC,IAAOH,OAAvB,SAAgCA,EAAOd,QACrC,KACJ,cAAC,IAAD,CACE0B,KAAK,WACLC,KAAK,WACLC,YAAY,WACZZ,UAAWC,IAAOY,QAEnBf,EAAOV,UAAYW,EAAQX,SAC1B,qBAAKY,UAAWC,IAAOH,OAAvB,SAAgCA,EAAOV,WACrC,KACJ,sBAAKY,UAAWC,IAAOa,cAAvB,UAEE,wBACEJ,KAAK,SACLV,UAAWC,IAAOkB,aAAe,IAAMlB,IAAOmB,OAFhD,qBAOA,cAAC,IAAD,CACEL,OAAK,EACLC,GAAIT,IAAOe,YACXtB,UAAWC,IAAOiB,aAHpB,4B,sBCpCGK,UAzBM,SAAC,GAA2B,IAAD,IAAxBC,cAAwB,MAAf,SAAe,EACxCC,EAAoB,WAAXD,EACTE,EAAoB,WAAXF,EACf,OACE,0BAASxB,UAAWC,IAAO0B,QAA3B,UACE,sBAAK3B,UAAWC,IAAO2B,QAAvB,UACE,oBAAI5B,UAAWC,IAAO4B,MAAtB,sBACA,oBAAG7B,UAAWC,IAAOG,KAArB,UACE,sBAAMJ,UAAWC,IAAO6B,SAAxB,eADF,qCAGE,uBAHF,+FAIiC,IAC/B,sBAAM9B,UAAWC,IAAO6B,SAAxB,yBALF,2DAM0C,IACxC,sBAAM9B,UAAWC,IAAO6B,SAAxB,qBAGJ,sBAAK9B,UAAWC,IAAO2B,QAAvB,UACGH,GAAU,cAAC,EAAD,IACVC,GAAU,cAAC,EAAD","file":"static/js/11.ac6617d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AuthForm_form__KcinH\",\"text\":\"AuthForm_text__3teb-\",\"buttonGoogleWrapper\":\"AuthForm_buttonGoogleWrapper__21G6u\",\"buttonGoogle\":\"AuthForm_buttonGoogle__1Sq9E\",\"input\":\"AuthForm_input__3bDTW\",\"errors\":\"AuthForm_errors__1f7On\",\"buttonWrapper\":\"AuthForm_buttonWrapper__3qbja\",\"buttonSignIn\":\"AuthForm_buttonSignIn__1n5TN\",\"active\":\"AuthForm_active__V8J9_\",\"buttonSignUp\":\"AuthForm_buttonSignUp__1M-EL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"AuthPageView_section__3AZgF\",\"wrapper\":\"AuthPageView_wrapper__2XSxD\",\"title\":\"AuthPageView_title__MJNFX\",\"text\":\"AuthPageView_text__2eHBL\",\"textBold\":\"AuthPageView_textBold__3kHfq\"};","import * as Yup from 'yup';\nconst SignupSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email address')\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  password: Yup.string()\n    .min(\n      8,\n      'Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters.',\n    )\n    .max(50, 'Too Long!')\n    .required('Required'),\n});\n\nexport default SignupSchema;\n","// import React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport routes from '../../routes';\nimport authOperations from '../../redux/auth/auth-operations';\nimport styles from './AuthForm.module.scss';\nimport SignupSchema from '../../helpers/formSchema';\n\nexport default function AuthForm() {\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        password: '',\n        email: '',\n      }}\n      validationSchema={SignupSchema}\n      onSubmit={values => {\n        const email = values.email;\n        const password = values.password;\n        dispatch(authOperations.logIn({ email, password }));\n      }}\n    >\n      {({ errors, touched }) => (\n        <Form className={styles.form} autoComplete=\"off\">\n          <h2 className={styles.text}>\n            You can use your Google Account to authorize:\n          </h2>\n          <div className={styles.buttonGoogleWrapper}>\n            <a href={routes.GOOGLE_AUTH_URL} className={styles.buttonGoogle}>\n              Google\n            </a>\n          </div>\n          <h2 className={styles.text}>\n            <strong>Login</strong> with email and password\n          </h2>\n          <Field\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"E-mail\"\n            className={styles.input}\n          />\n\n          {errors.email && touched.email ? (\n            <div className={styles.errors}>{errors.email}</div>\n          ) : null}\n\n          <Field\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            className={styles.input}\n          />\n          {errors.password && touched.password ? (\n            <div className={styles.errors}>{errors.password}</div>\n          ) : null}\n\n          <div className={styles.buttonWrapper}>\n            <NavLink\n              exact\n              to={routes.AUTH_SIGNUP}\n              className={styles.buttonSignUp}\n            >\n              Sign up\n            </NavLink>\n            <button\n              type=\"submit\"\n              className={styles.buttonSignIn + ' ' + styles.active}\n            >\n              Login\n            </button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","// import React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { NavLink } from 'react-router-dom';\n// import * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport routes from '../../routes';\nimport authOperations from '../../redux/auth/auth-operations';\nimport SignupSchema from '../../helpers/formSchema';\nimport styles from './AuthForm.module.scss';\nexport default function AuthForm() {\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        password: '',\n        email: '',\n      }}\n      validationSchema={SignupSchema}\n      onSubmit={values => {\n        const email = values.email;\n        const password = values.password;\n        dispatch(authOperations.register({ email, password }));\n      }}\n    >\n      {({ errors, touched }) => (\n        <Form className={styles.form} autoComplete=\"off\">\n          <h2 className={styles.text}>\n            You can use your Google Account to authorize:\n          </h2>\n          <div className={styles.buttonGoogleWrapper}>\n            <a href={routes.GOOGLE_AUTH_URL} className={styles.buttonGoogle}>\n              Google\n            </a>\n          </div>\n          <h2 className={styles.text}>\n            <strong>Sign Up</strong> with email and password\n          </h2>\n          <Field\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"E-mail\"\n            className={styles.input}\n          />\n          {errors.email && touched.email ? (\n            <div className={styles.errors}>{errors.email}</div>\n          ) : null}\n          <Field\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            className={styles.input}\n          />\n          {errors.password && touched.password ? (\n            <div className={styles.errors}>{errors.password}</div>\n          ) : null}\n          <div className={styles.buttonWrapper}>\n\n            <button\n              type=\"submit\"\n              className={styles.buttonSignIn + ' ' + styles.active}\n            >\n              Sign Up\n\n            </button>\n            <NavLink\n              exact\n              to={routes.AUTH_SIGNIN}\n              className={styles.buttonSignUp}\n            >\n\n              Login\n\n            </NavLink>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import SignIn from '../../component/AuthForm/SingIn';\nimport SignUp from '../../component/AuthForm/SignUp';\nimport styles from './AuthPageView.module.scss';\n\nconst AuthPageView = ({ action = 'signup' }) => {\n  const signIn = action === 'signin';\n  const signUp = action === 'signup';\n  return (\n    <section className={styles.section}>\n      <div className={styles.wrapper}>\n        <h2 className={styles.title}>Pro Test</h2>\n        <p className={styles.text}>\n          <span className={styles.textBold}>[</span> We will help you find weak\n          points\n          <br /> in knowledge so that you can strengthen it. We will show you\n          what is relevant to know for a{' '}\n          <span className={styles.textBold}>QA Engineer</span> and will try to\n          make the learning process more diverse_{' '}\n          <span className={styles.textBold}>]</span>\n        </p>\n      </div>\n      <div className={styles.wrapper}>\n        {signIn && <SignIn />}\n        {signUp && <SignUp />}\n      </div>\n    </section>\n  );\n};\n\nexport default AuthPageView;\n"],"sourceRoot":""}